name: Sync Hotfix to Develop

on:
  workflow_run:
    workflows: ["Pipeline Principal"]
    types:
      - completed

jobs:
  create-sync-pr:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main

      - name: Detectar hotfix
        id: detect_hotfix
        run: |
          # Obtener el último commit en main
          git fetch origin main
          LAST_COMMIT_SHA=$(git rev-parse HEAD)
          echo "Último commit en main: $LAST_COMMIT_SHA"
          
          # Buscar si el último commit de merge viene de un hotfix
          LAST_MERGE_MSG=$(git log -1 --merges --pretty=%B)
          echo "Mensaje del último merge: $LAST_MERGE_MSG"
          
          IS_HOTFIX=false
          HOTFIX_BRANCH=""
          IS_DEVELOP_MERGE=false
          
          # Detectar explícitamente si es un merge desde develop
          if [[ "$LAST_MERGE_MSG" == *"from "* && "$LAST_MERGE_MSG" == *"/develop"* ]]; then
            echo "⚠️ Detectado merge desde develop a main - no se requiere sincronización"
            IS_DEVELOP_MERGE=true
            echo "is_develop_merge=true" >> $GITHUB_OUTPUT
          fi
          
          # Verificar si el mensaje de merge contiene 'hotfix/'
          if [[ "$LAST_MERGE_MSG" == *"hotfix/"* ]]; then
            echo "✅ Merge de hotfix detectado en el mensaje"
            IS_HOTFIX=true
            # Extraer el nombre de la rama de hotfix del mensaje
            HOTFIX_BRANCH=$(echo "$LAST_MERGE_MSG" | grep -oE "hotfix/[^ ]+" | head -1)
            echo "Nombre de rama hotfix extraído: $HOTFIX_BRANCH"
          else
            echo "No se detectó hotfix en el mensaje de merge, verificando ramas..."
            
            # Verificar todas las ramas que contienen este commit
            # Usamos || true para que el comando no falle si no hay resultados
            SOURCE_BRANCHES=$(git branch -r --contains $LAST_COMMIT_SHA | grep -v "origin/main" | grep -v "HEAD" || true)
            
            echo "Ramas que contienen el último commit:"
            echo "$SOURCE_BRANCHES"
            
            # Buscar si alguna de estas ramas es un hotfix
            if [[ -n "$SOURCE_BRANCHES" ]]; then
              while IFS= read -r branch; do
                # Limpiar el nombre de la rama
                branch=$(echo "$branch" | xargs)
                
                if [[ -z "$branch" ]]; then
                  continue
                fi
                
                # Quitar "origin/" del nombre de la rama si existe
                clean_branch=${branch#origin/}
                
                echo "Verificando rama: $clean_branch"
                
                # Verificar si es una rama de hotfix por el nombre
                if [[ "$clean_branch" == hotfix/* ]]; then
                  IS_HOTFIX=true
                  HOTFIX_BRANCH="$clean_branch"
                  echo "✅ Hotfix detectado: $HOTFIX_BRANCH"
                  break
                fi
              done <<< "$SOURCE_BRANCHES"
            else
              echo "No se encontraron ramas remotas que contengan este commit (aparte de main)"
            fi
          fi
          
          if [[ "$IS_HOTFIX" == "true" ]]; then
            echo "is_hotfix=true" >> $GITHUB_OUTPUT
            echo "hotfix_branch=$HOTFIX_BRANCH" >> $GITHUB_OUTPUT
          else
            echo "❌ No se detectó ningún hotfix reciente, no se requiere sincronización"
            echo "is_hotfix=false" >> $GITHUB_OUTPUT
          fi

      - name: Preparar para sincronización
        if: steps.detect_hotfix.outputs.is_hotfix == 'true' && steps.detect_hotfix.outputs.is_develop_merge != 'true'
        id: prepare
        run: |
          # Verificar si develop existe
          git fetch --all --prune
          
          if git show-ref --verify --quiet refs/remotes/origin/develop; then
            echo "✅ Rama develop encontrada"
            echo "develop_exists=true" >> $GITHUB_OUTPUT
            
            # Verificar si hay diferencias
            MAIN_HASH=$(git rev-parse origin/main)
            DEVELOP_HASH=$(git rev-parse origin/develop)
            
            if [ "$MAIN_HASH" = "$DEVELOP_HASH" ]; then
              echo "✅ Las ramas ya están sincronizadas (mismo commit)"
              echo "need_sync=false" >> $GITHUB_OUTPUT
            else
              echo "⚠️ Las ramas necesitan sincronización"
              echo "need_sync=true" >> $GITHUB_OUTPUT
              
              # Calcular el número de commits diferentes
              COMMITS_AHEAD=$(git rev-list --count origin/main ^origin/develop)
              COMMITS_BEHIND=$(git rev-list --count origin/develop ^origin/main)
              echo "Main está $COMMITS_AHEAD commits adelante y $COMMITS_BEHIND commits detrás de develop"
              echo "commits_ahead=$COMMITS_AHEAD" >> $GITHUB_OUTPUT
              echo "commits_behind=$COMMITS_BEHIND" >> $GITHUB_OUTPUT
            fi
          else
            echo "❌ La rama develop no existe"
            echo "develop_exists=false" >> $GITHUB_OUTPUT
            echo "need_sync=false" >> $GITHUB_OUTPUT
          fi
          
          # Preparar etiquetas de GitHub
          gh label list | grep -q "hotfix" || gh label create "hotfix" --color "d73a4a" --description "Corrección urgente para producción"
          gh label list | grep -q "sync" || gh label create "sync" --color "0e8a16" --description "Sincronización entre ramas"
          gh label list | grep -q "automated" || gh label create "automated" --color "006b75" --description "PR generado automáticamente"
          gh label list | grep -q "high-priority" || gh label create "high-priority" --color "b60205" --description "Necesita atención inmediata"
          # Añadir la etiqueta urgent si no existe
          gh label list | grep -q "urgent" || gh label create "urgent" --color "d93f0b" --description "Requiere atención inmediata"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Creamos manualmente la rama para la PR en lugar de depender de la acción
      - name: Crear rama para PR manualmente
        id: create_branch
        if: steps.detect_hotfix.outputs.is_hotfix == 'true' && steps.detect_hotfix.outputs.is_develop_merge != 'true' && steps.prepare.outputs.develop_exists == 'true' && steps.prepare.outputs.need_sync == 'true'
        run: |
          echo "Creando rama para el PR manualmente..."
          # Crear un nombre de rama dinámico basado en el nombre del hotfix
          HOTFIX_NAME=$(echo "${{ steps.detect_hotfix.outputs.hotfix_branch }}" | sed 's/hotfix\///')
          SYNC_BRANCH="sync/${HOTFIX_NAME}-to-develop"
          
          # Asegurarnos de estar en main actualizado
          git checkout main
          git pull origin main
          
          # Borrar la rama local si existe
          git branch -D $SYNC_BRANCH 2>/dev/null || true
          
          # Crear la rama desde main (que contiene el hotfix)
          git checkout -b $SYNC_BRANCH
          
          # Forzar push a origin para asegurar que la rama existe
          git push -f origin $SYNC_BRANCH
          
          echo "✅ Rama $SYNC_BRANCH creada y enviada a origin"
          echo "branch_name=$SYNC_BRANCH" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Ahora usamos la CLI de GitHub para crear el PR directamente
      - name: Crear PR con GitHub CLI
        id: create_pr
        if: steps.detect_hotfix.outputs.is_hotfix == 'true' && steps.detect_hotfix.outputs.is_develop_merge != 'true' && steps.prepare.outputs.develop_exists == 'true' && steps.prepare.outputs.need_sync == 'true' && steps.create_branch.outputs.branch_name != ''
        run: |
          set -euo pipefail
          SYNC_BRANCH="${{ steps.create_branch.outputs.branch_name }}"
          
          # Crear el PR directamente con gh cli usando JSON para salida estructurada
          gh pr create \
            --title "🔄 Sync: Hotfix from main to develop" \
            --body "# ⚠️ Sincronización de hotfix (ALTA PRIORIDAD)
            
            Este PR fue creado automáticamente para sincronizar el hotfix aplicado en \`main\` a la rama \`develop\`.
            
            ## 📋 Detalles
            - **Rama hotfix**: \`${{ steps.detect_hotfix.outputs.hotfix_branch }}\`
            - **Commit ID**: \`${{ github.event.workflow_run.head_sha }}\`
            - **Workflow run**: [Ver ejecución](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.event.workflow_run.id }})
            
            ## 🔍 Revisión requerida
            Este PR **requiere revisión manual** para:
            1. Verificar si existen conflictos con los cambios en \`develop\`
            2. Asegurar que la integración no rompe otras características en desarrollo
            3. Mantener la consistencia entre las ramas \`main\` y \`develop\`
            
            ## ⚡ Impacto
            Hasta que no se fusione este PR, la rama \`develop\` estará desactualizada y no incluirá las correcciones críticas ya aplicadas a producción.
            
            ## 📌 Notas
            - Este PR contiene únicamente los cambios del hotfix aplicado a \`main\`
            - El hotfix ya ha sido validado en producción
            - Si hay conflictos, deben resolverse manualmente" \
            --base develop \
            --head $SYNC_BRANCH \
            --label "hotfix,sync,automated,high-priority,urgent" \
            --json url,number > pr.json
          
          # Extraer información del PR desde el JSON
          PR_URL=$(jq -r .url pr.json)
          PR_NUMBER=$(jq -r .number pr.json)
          
          if [ -n "$PR_URL" ] && [ -n "$PR_NUMBER" ]; then
            echo "✅ PR creado exitosamente: $PR_URL"
            echo "pull_request_url=$PR_URL" >> $GITHUB_OUTPUT
            echo "pull_request_number=$PR_NUMBER" >> $GITHUB_OUTPUT
            
            # Asignar revisores
            REVIEWERS="${{ vars.HOTFIX_REVIEWERS || github.repository_owner }}"
            gh pr edit $PR_NUMBER --add-reviewer "$REVIEWERS" --add-assignee "${{ github.repository_owner }}"
          else
            echo "❌ Falló la creación del PR"
            exit 1
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # En caso de fallo al crear el PR, crear un issue para manual tracking
      - name: Crear issue si falló el PR
        id: create_issue
        if: steps.detect_hotfix.outputs.is_hotfix == 'true' && steps.detect_hotfix.outputs.is_develop_merge != 'true' && steps.prepare.outputs.develop_exists == 'true' && steps.prepare.outputs.need_sync == 'true' && (steps.create_branch.outputs.branch_name == '' || steps.create_pr.outputs.pull_request_number == '')
        run: |
          echo "⚠️ No se pudo crear el PR automáticamente, creando issue para seguimiento manual..."
          
          # Crear primero las etiquetas necesarias
          gh label list | grep -q "hotfix" || gh label create "hotfix" --color "d73a4a" --description "Corrección urgente para producción"
          gh label list | grep -q "high-priority" || gh label create "high-priority" --color "b60205" --description "Necesita atención inmediata"
          gh label list | grep -q "urgent" || gh label create "urgent" --color "d93f0b" --description "Requiere atención inmediata"
          
          # Usamos solo etiquetas que sabemos que existen
          ISSUE_URL=$(gh issue create \
            --title "🔥 [URGENTE] Sincronizar hotfix ${{ steps.detect_hotfix.outputs.hotfix_branch }} a develop" \
            --body "
            # Sincronización manual requerida
            
            El workflow automático no pudo crear un PR para sincronizar el hotfix reciente a develop.
            
            ## Detalles
            - Rama hotfix: \`${{ steps.detect_hotfix.outputs.hotfix_branch }}\`
            - Commit en main: \`${{ github.event.workflow_run.head_sha }}\`
            
            ## Acción requerida
            Por favor, crea manualmente un PR desde \`main\` a \`develop\` para sincronizar los cambios del hotfix. Pueden existir conflictos que requieran resolución manual.
            
            ## Impacto
            Hasta que no se sincronice este hotfix, la rama develop estará desactualizada y no incluirá las correcciones críticas aplicadas a producción.
            " \
            --label "hotfix,high-priority,urgent")
          
          if [ -n "$ISSUE_URL" ]; then
            echo "✅ Issue creado: $ISSUE_URL"
            echo "issue_url=$ISSUE_URL" >> $GITHUB_OUTPUT
          else
            echo "❌ Falló la creación del issue"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Verificar resultado
        if: steps.detect_hotfix.outputs.is_hotfix == 'true' && steps.detect_hotfix.outputs.is_develop_merge != 'true'
        run: |
          if [ "${{ steps.prepare.outputs.need_sync }}" != "true" ]; then
            echo "✅ No se requiere sincronización (ramas ya sincronizadas)"
            exit 0
          fi
          
          if [ -n "${{ steps.create_pr.outputs.pull_request_number }}" ]; then
            echo "✅ PR de sincronización creado exitosamente (#${{ steps.create_pr.outputs.pull_request_number }})"
            echo "URL: ${{ steps.create_pr.outputs.pull_request_url }}"
            
            # Si hay conflictos, el PR estará marcado para revisión manual
            echo "ℹ️ Por favor revisa el PR para verificar si hay conflictos que requieran resolución manual"
            exit 0
          fi
          
          if [ -n "${{ steps.create_issue.outputs.issue_url }}" ]; then
            echo "⚠️ No se pudo crear el PR, pero se ha creado un issue para seguimiento"
            echo "Issue URL: ${{ steps.create_issue.outputs.issue_url }}"
            exit 0
          fi
          
          echo "❌ No se pudo sincronizar el hotfix ni crear un issue de seguimiento"
          exit 1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}